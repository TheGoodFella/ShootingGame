using UnityEngine;
using System.Collections;

public class gunMover : MonoBehaviour {

    Rigidbody rb;

    /// <summary>
    /// sensibility of moving
    /// </summary>
    public float speed;

    public enum RotationAxes { MouseXAndY = 0, MouseX = 1, MouseY = 2 }
    public RotationAxes axes = RotationAxes.MouseXAndY;
    public float sensitivityX = 15F;
    public float sensitivityY = 15F;
    public float minimumX = -360F;
    public float maximumX = 360F;
    public float minimumY = -60F;
    public float maximumY = 60F;
    private float rotationY = 0F;
    private float offsetX;

    /// <summary>
    /// intensity of moving forward (W)
    /// </summary>
    private float moveForward = 0;

    /// <summary>
    /// intensity of moving backward (S)
    /// </summary>
    private float moveBackward = 0;


    void Update()
    {
        if (axes == RotationAxes.MouseXAndY)
        {
            float rotationX = transform.localEulerAngles.y + Input.GetAxis("Mouse X") * sensitivityX;

            rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);

            transform.localEulerAngles = new Vector3(-rotationY, rotationX, 0);
        }
        else if (axes == RotationAxes.MouseX)
        {
            transform.Rotate(0, Input.GetAxis("Mouse X") * sensitivityX, 0);
        }
        else
        {
            rotationY += Input.GetAxis("Mouse Y") * sensitivityY;
            rotationY = Mathf.Clamp(rotationY, minimumY, maximumY);

            transform.localEulerAngles = new Vector3(-rotationY, transform.localEulerAngles.y, 0);
        }
    }

    void Start()
    {
        // Make the rigid body not change rotation
        rb = GetComponent<Rigidbody>();
        if (rb)
            rb.freezeRotation = true;
    }

    // Update is called once per frame
    void FixedUpdate()
    {
        if (Input.GetKey(KeyCode.W) || Input.GetKey(KeyCode.S))
        {
            //I memorize the offset generated by pressing the key (W-A-S-D or arrows)

            moveForward = Input.GetAxis("Vertical");
            moveBackward = -Input.GetAxis("Horizontal");

            Debug.Log("for: " + moveForward);
            Debug.Log("back: " + moveBackward);

            ///Create the vector3 generated by the offset before
            Vector3 v3 = new Vector3(moveForward, 0.0f, moveBackward);


            ///apply the vector 3 summed with the previous values of the gun's transform at the transform
            //transform.position = new Vector3(transform.position.x + moveForward,
            //transform.position.y, transform.position.z + moveBackward);
            ///if W is not pressed, stop the force applied to the gun

            rb.AddForce(v3 * speed);
        }
        else
        {
            rb.velocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
        }
    }
}
